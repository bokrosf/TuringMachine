@startuml classes

hide interface empty members
hide enum empty members

class "Symbol<T>" as Symbol {
    -{static} NullValueHashCode: int = 0 {query}
    +{method} {static} Blank: Symbol<T> {query}
    +{method} Value: T {query}
    {static} Symbol()
    +Symbol(value: T)
    +Equals(obj: object?): bool
    +{static} Equality(left: Symbol<T>?, right: Symbol<T>): bool
    +{static} Inequality(left: Symbol<T>?, right: Symbol<T>): bool
    +GetHashCode(): int
}

enum TapeHeadDirection {
    Stay
    Left
    Right
}

class "Tape<T>" as Tape {
    -symbols: LinkedList<Symbol<T>>
    -head: LinkedListNode<Symbol<T>>
    +{method} CurrentSymbol: Symbol<T> {query}
    +Tape()
    +Tape(symbols: IEnumerable<Symbol<T>>)
    +MoveHeadInDirection(direction: TapeHeadDirection): Symbol<T>
    +Clear(): void
    -MoveHeadToTheLeft(): Symbol<T>
    -MoveHeadToTheRight(): Symbol<T>
}

Tape "*" o-left- "1..*" Symbol
interface "IEnumerable<T>" as IEnumerable
IEnumerable <|.. Tape
Tape --> TapeHeadDirection

@enduml