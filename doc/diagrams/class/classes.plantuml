@startuml classes

class Symbol<T> {
    --
    +{static} Symbol<T> Blank {query}
    +T Value {query}
    {static} Symbol()
    +Symbol(T value)
    +bool Equals(object? obj)
    +{static} bool ==(Symbol<T>? left, Symbol<T> right)
    +{static} bool !=(Symbol<T>? left, Symbol<T> right)
    +int GetHashCode()
}

enum TapeHeadDirection {
    Stay
    Left
    Right
}

class "Tape<T>" as Tape_T {
    -LinkedList<Symbol<T>> symbols
    -LinkedListNode<Symbol<T>> head
    +{method} Symbol<T> CurrentSymbol {query}
    +Tape()
    +Tape(IEnumerable<Symbol<T>> symbols)
    +Symbol<T> MoveHeadInDirection(TapeHeadDirection direction)
    +void Clear()
    -Symbol<T> MoveHeadToTheLeft()
    -Symbol<T> MoveHeadToTheRight()
}

interface "IEnumerable<T>" as IEnumerable_T
Tape_T <|.. IEnumerable_T
Tape_T --> TapeHeadDirection

@enduml