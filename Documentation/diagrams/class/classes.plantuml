@startuml classes
hide interface empty members
hide enum empty members
skinparam ClassAttributeIconSize 0

class "Symbol<T>" as Symbol {
    -{static} NullValueHashCode: int = 0 {query}    
    {static} Symbol()
    +Symbol(value: T)
    +ToString(): string
    +Equals(obj: object?): bool
    +{static} Equality(left: Symbol<T>?, right: Symbol<T>): bool
    +{static} Inequality(left: Symbol<T>?, right: Symbol<T>): bool
    +GetHashCode(): int
    +{method} {static} Blank: Symbol<T> {query}
    +{method} Value: T {query}
}

class "State<T>" as State {
    -{static} NullValueHashCode: int = 0 {query}
    -{static} InitialHashCode: int = 100003 {query}
    -{static} AcceptHashCode: int = 500009 {query}
    -{static} RejectHashCode: int = 900007 {query}
    {static} State()
    +State(value: T)
    +ToString(): string
    +Equals(obj: object?): bool
    +{static} Equality(left: State<T>?, right: State<T>): bool
    +{static} Inequality(left: State<T>?, right: State<T>): bool
    +GetHashCode(): int
    +{method} {static} Initial: T {query}
    +{method} {static} Accept: T {query}
    +{method} {static} Reject: T {query}
    +{method} Value: T {query}
    +{method} IsFinishState: bool {query}
}

Symbol -[hidden]- State

enum TapeHeadDirection {
    Stay
    Left
    Right
}

class "Tape<T>" as Tape {
    -symbols: LinkedList<Symbol<T>>
    -head: LinkedListNode<Symbol<T>>
    +Tape()
    +Tape(symbols: IEnumerable<Symbol<T>>)
    +MoveHeadInDirection(direction: TapeHeadDirection): Symbol<T>
    +Clear(): void
    +{method} CurrentSymbol: Symbol<T> {query}
    -MoveHeadToTheLeft(): Symbol<T>
    -MoveHeadToTheRight(): Symbol<T>
}

Tape "*" o-left- "1..*" Symbol
interface "IEnumerable<T>" as IEnumerable
IEnumerable <|.. Tape
Tape ..> TapeHeadDirection

namespace TuringMachine.Transition.SingleTape {
    class "TransitionDomain<TState, TSymbol>" as TransitionDomain << record >> {
        +{method} State: State<TState> {query}
        +{method} Symbol: Symbol<TSymbol> {query}
        +Implicit(state: TState, value: TSymbol): TransitionDomain<TState, TSymbol>
        +Implicit(state: State<TState>, symbol: Symbol<TSymbol>): TransitionDomain<TState, TSymbol>
    }

    class "TransitionRange<TState, TSymbol>" as TransitionRange << record >> {
        +{method} HeadDirection: TapeHeadDirection {query}
        +Implicit(state: TState, value: TSymbol, headDirection: TapeHeadDirection): TransitionRange<TState, TSymbol>
        +Implicit(state: State<TState>, symbol: Symbol<TSymbol>, headDirection: TapeHeadDirection): TransitionRange<TState, TSymbol>
    }

    class "Transition<TState, TSymbol>" as Transition << record >> {
        +{method} Domain: TransitionDomain<TState, TSymbol> {query}
        +{method} Range: TransitionRange<TState, TSymbol> {query}
        +Implicit(domain: TransitionDomain<TState, TSymbol>, range: TransitionRange<TState, TSymbol>): Transition<TState, TSymbol>
    }

    class "TransitionTable<TState, TSymbol>" as TransitionTable {
        -transitions: ReadOnlyDictionary<TState, TSymbol>
        +TransitionTable(transitions: IEnumerable<Transition<TState, TSymbol>>)
        ~{method} <<indexer>> [domain: TransitionDomain<TState, TSymbol>]: TransitionRange
    }

    class "TransitionCollectionValidator<TState, TSymbol>" as TransitionCollectionValidator {
        +Validate(transitions: IEnumerable<Transition<TState, TSymbol>>): void
        -CheckDuplications(transitions: IEnumerable<Transition<TState, TSymbol>>): void
        -CheckDeterminism(transitions: IEnumerable<Transition<TState, TSymbol>>): void
        -CheckStates(transitions: IEnumerable<Transition<TState, TSymbol>>): void
        -CheckStateOfDomain(transition: Transition<TState, TSymbol>): void
        -CheckStateOfRange(transition: Transition<TState, TSymbol>): void
    }
}

class "Computation<TComputationState, TConfiguration>" as Computation <<record>> {
    +{method} Mode: ComputationMode {query}
    +{method} State: TComputationState {query}
    +{method} Constraint: IReadOnlyComputationState<TConfiguration>>? {query}
    +{method} IsAborted: bool {query}
}

interface "IAutomaticComputation<TSymbol, TConfiguration>" as IAutomaticComputation {
    StartAutomaticComputationAsync(input: IEnumerable<Symbol<TSymbol>>): Task
    StartAutomaticComputationAsync(input: IEnumerable<Symbol<TSymbol>>, constraint: IComputationConstraint<TConfiguration>): Task
    StartAutomaticComputation(input: IEnumerable<Symbol<TSymbol>>): void
    StartAutomaticComputation(input: IEnumerable<Symbol<TSymbol>>, constraint: IComputationConstraint<TConfiguration>): void
    RequestAbortion(): void
}

interface "IManualComputation<TSymbol, TConfiguration>" as IManualComputation {
    StartManualComputation(input: IEnumerable<Symbol<TSymbol>>): void
    StartManualComputation(input: IEnumerable<Symbol<TSymbol>>, constraint: IComputationConstraint<TConfiguration>): void
    Step(): bool
    RequestAbortion(): void
}

interface "IComputationTracking<TState, TSymbol, TTransition>" as IComputationTracking {
    Stepped: EventHandler<SteppedEventArgs<TTransition>>?
    ComputationTerminated: EventHandler<ComputationTerminatedEventArgs<TState, TSymbol>>?
    ComputationAborted: EventHandler<ComputationAbortedEventArgs<TState, TSymbol>>?
}

abstract class ComputationStateChangedEventArgs {
    +{method} StepCount: int {query}
    +{method} Duration: TimeSpan {query}
}

class "SteppedEventArgs<TTransition>" as SteppedEventArgs {
    +{method} Transition: TTransition {query}
}

class "ComputationTerminatedEventArgs<TState, TSymbol>" as ComputationTerminatedEventArgs {
    +{method} State: TState {query}
    +{method} RawResult: IReadOnlyList<Symbol<TSymbol>> {query}
    +TrimResult(): IEnumerable<Symbol<TSymbol>> 
}

class "ComputationAbortedEventArgs<TState, TSymbol>" as ComputationAbortedEventArgs {
    +{method} Exception: Exception? {query}
    +{method} ConstraintViolation: ConstraintViolation? {query}
}

enum ComputationMode {
    Automatic,
    Manual
}

~abstract class "Machine<TState, TSymbol, TComputationState, TConfiguration, TTransition>" as Machine {
    #computationLock: object
    #computation: Computation<TComputationState, TConfiguration>?
    -manualComputationLock: object
    #Machine()
    #{abstract} InitializeComputation(computationMode: ComputationMode, input: IEnumerable<Symbol<TSymbol>>, constraint: IComputationConstraint<IReadOnlyComputationState<TConfiguration>>?): void
    #{abstract} TransitToNextState(): void
    #{abstract} Terminate(): void
    #{abstract} CleanupComputation(): void
    #{abstract} CanTerminate(): bool
    #{abstract} AbortComputation(ex: Exception?, violation: ConstraintViolation?): void
    #OnStepped(eventArgs: SteppedEventArgs<TTransition>): void
    #OnComputationTerminated(eventArgs: ComputationTerminatedEventArgs<TState, TSymbol>): void
    #OnComputationAborted(eventArgs: ComputationAbortedEventArgs<TState, TSymbol>): void
    -PerformStep(): bool
    -IsAborted(): bool
    -Compute(): void
    -AbortComputation(): void
    -AbortComputation(ex: Exception?): void
    -AbortComputation(violation: ConstraintViolation?): void
    
}

namespace TuringMachine.Machine {
    class "Machine<TState, TSymbol>" as Machine {
        -tape: Tape<TSymbol>
        -transitionTable: TransitionTable<TState, TSymbol>
        +SingleTapeMachine(transitionTable: TransitionTable<TState, TSymbol>)
        #InitializeComputation(computationMode: ComputationMode, input: IEnumerable<Symbol<TSymbol>>, constraint: IComputationConstraint<IReadOnlyComputationState<TransitionDomain<TState, TSymbol>>>?): void
        #TransitToNextState(): void
        #Terminate(): void
        #CleanupComputation(): void
        #CanTerminate(): bool
        #AbortComputation(ex: Exception?, violation: ConstraintViolation?): void
    }
}

interface IReadOnlyComputationState {
    {method} StepCount: int {query}
    {method} Duration: TimeSpan {query}
}

interface "IReadOnlyComputationState<TConfiguration>" as IReadOnlyComputationStateWithTStateAndTConfiguration {
    {method} Configuration: TConfiguration {query}
}

abstract class "ComputationState<TConfiguration>" as ComputationState {
    -durationWatch: StopWatch
    #ComputationState()
    +UpdateConfiguration(configuration: TConfiguration): void
    +StartDurationWatch(): void
    +StopDurationWatch(): void
    +AsReadOnly(): IReadOnlyComputationState<TConfiguration>
    +{abstract}{method} Configuration: TConfiguration {query}
    +{abstract} IsFinishedState(configuration: TConfiguration): bool
}

~class "ReadOnlyComputationState<TConfiguration>" as ReadOnlyComputationState {
    -computationState: IReadOnlyComputationState<TConfiguration>
    +ReadOnlyComputationState(computationState: IReadOnlyComputationState<TConfiguration>)
}

namespace TuringMachine.Computation.SingleTape {
    class "ComputationState<TState, TSymbol>" as ComputationState {
        +ComputationState(symbol: Symbol<TSymbol>)
        +{method} Configuration: TransitionDomain<TState, TSymbol> {query}
    }
}

namespace TuringMachine.Computation.MultiTape {
    class "ComputationState<TState, TSymbol>" as ComputationState {
        +ComputationState(symbols: IEnumerable<Symbol<TSymbol>>)
        +{method} Configuration: TransitionDomain<TState, TSymbol> {query}
    }
}

IReadOnlyComputationState <|-- IReadOnlyComputationStateWithTStateAndTConfiguration
IReadOnlyComputationStateWithTStateAndTConfiguration <|.. ComputationState
ComputationState <|-- TuringMachine.Computation.SingleTape.ComputationState
ComputationState <|-- TuringMachine.Computation.MultiTape.ComputationState
ReadOnlyComputationState o-up- IReadOnlyComputationStateWithTStateAndTConfiguration

interface "IComputationConstraint<TConfiguration>" as IComputationConstraint {
    Enforce(IReadOnlyComputationState<TConfiguration> computationState): ConstraintViolation?
}

class StepLimitConstraint {
    -stepLimit: int
    +StepLimitConstraint(stepLimit: int)
}

class TimeLimitConstraint {
    -timeLimit: TimeSpan
    +TimeLimitConstraint(timeout: TimeSpan)
}

class MultiConstraint {
    -constraints: IReadOnlyCollection<IComputationConstraint<IReadOnlyComputationState>>
    +MultiConstraint(constraints: IEnumerable<IComputationConstraint<IReadOnlyComputationState>>)
}

TuringMachine.Transition.SingleTape.TransitionDomain <|-- TuringMachine.Transition.SingleTape.TransitionRange
TuringMachine.Transition.SingleTape.Transition "*" o-- "1" TuringMachine.Transition.SingleTape.TransitionDomain
TuringMachine.Transition.SingleTape.Transition "*" o-- "1" TuringMachine.Transition.SingleTape.TransitionRange
TuringMachine.Transition.SingleTape.TransitionTable "*" o-- "1..*" TuringMachine.Transition.SingleTape.TransitionDomain
TuringMachine.Transition.SingleTape.TransitionTable "*" o-- "1..*" TuringMachine.Transition.SingleTape.TransitionRange
TuringMachine.Transition.SingleTape.TransitionTable -up-> "Validate()" TuringMachine.Transition.SingleTape.TransitionCollectionValidator
Tape -[hidden]right- TuringMachine.Transition.SingleTape.Transition

ComputationStateChangedEventArgs <|-- SteppedEventArgs
ComputationStateChangedEventArgs <|-- ComputationTerminatedEventArgs
ComputationTerminatedEventArgs <|-- ComputationAbortedEventArgs

IAutomaticComputation <|.. Machine
IManualComputation <|.. Machine
IComputationTracking <|.. Machine
Machine *-- Computation
TuringMachine.Machine.Machine *-- Tape
TuringMachine.Machine.Machine "*" o-- "1" TuringMachine.Transition.SingleTape.TransitionTable
Machine <|-- TuringMachine.Machine.Machine
Computation "1..*" *-- "0..1" ComputationMode   

IComputationConstraint <|.. StepLimitConstraint
IComputationConstraint <|.. TimeLimitConstraint
IComputationConstraint <|.. MultiConstraint
IReadOnlyComputationState <.. IComputationConstraint : parameter

MultiConstraint -[hidden]down- ConstraintViolation

class ConstraintViolation << record >> {
    +{method} Reason: string
}

class StepLimitViolation << record >> {
    +{method} StepLimit: int
}

class TimeLimitViolation << record >> {
    +{method} TimeLimit: TimeSpan
}

class MultiViolation << record >> {
    +{method} Violations: IEnumerable<Violation>
}

ConstraintViolation <|-- CancellationViolation
ConstraintViolation <|-- StepLimitViolation
ConstraintViolation <|-- TimeLimitViolation
ConstraintViolation <|-- MultiViolation

namespace TuringMachine.Transition.MultiTape {
    class "StateTransition<TState>" as StateTransition {
        +{method} Domain: State<TState>
        +{method} Range: State<TState>
    }

    class "TapeTransition<TSymbol>" as TapeTransition {
        +{method} Domain: Symbol<TSymbol>
        +{method} Range: Symbol<TSymbol>
        +{method} TapeHeadDirection: TapeHeadDirection
    }

    class "Transition<TState, TSymbol>" as Transition {
        +Transition(state: StateTransition<TState>, tapes: IEnumerable<TapeTransition<TSymbol>>)
        +{method} State: StateTransition<TState>
        +{method} Tapes: IReadOnlyList<TapeTransition<TSymbol>>
    }   

    ~class "TapeTransitionRange<TSymbol>" as TapeTransitionRange << record >> {
        +{method} Symbol: Symbol<TSymbol>
        +{method} TapeHeadDirection: TapeHeadDirection
    }

    ~class "TransitionRange<TState, TSymbol>" as TransitionRange {
        +TransitionRange(state: State<TState>, tapes: IEnumerable<TapeTransitionRange<TSymbol>>)
        +{method} State: State<TState>
        +{method} Tapes: IReadOnlyList<TapeTransitionRange<TSymbol>>
    }

    class "TransitionDomain<TState, TSymbol>" as TransitionDomain {
        +TransitionDomain(state: State<TState>, symbols: IEnumerable<Symbol<TSymbol>>)
        +{method} State: State<TState> {query}
        +{method} TapeSymbols: IReadOnlyList<Symbol<TSymbol>> {query}
    }

    interface "ITransitionTable<TState, TSymbol>" as ITransitionTable {
        ~ <<indexer>> [domain: TransitionDomain<TState, TSymbol>]: TransitionRange<TState, TSymbol>
    }

    TuringMachine.Transition.MultiTape.Transition o-- TuringMachine.Transition.MultiTape.StateTransition
    TuringMachine.Transition.MultiTape.Transition o-- "1..*" TuringMachine.Transition.MultiTape.TapeTransition
    TuringMachine.Transition.MultiTape.ITransitionTable ..> TuringMachine.Transition.MultiTape.TransitionDomain
    TuringMachine.Transition.MultiTape.ITransitionTable ..> TuringMachine.Transition.MultiTape.TransitionRange
    TuringMachine.Transition.MultiTape.TransitionRange o-- "1..*" TuringMachine.Transition.MultiTape.TapeTransitionRange
}

@enduml